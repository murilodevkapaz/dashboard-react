[{"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\index.tsx":"1","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\reportWebVitals.ts":"2","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\app.tsx":"3","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\globalStyles.ts":"4","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\themes\\dark.ts":"5","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\list\\index.tsx":"6","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Layout\\index.tsx":"7","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\list\\styles.ts":"8","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Layout\\styles.ts":"9","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\ContentHeader\\index.tsx":"10","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\SelectInput\\index.tsx":"11","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryFinanceCard\\index.tsx":"12","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MainHeader\\index.tsx":"13","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Aside\\index.tsx":"14","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Content\\index.tsx":"15","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\ContentHeader\\styles.ts":"16","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\SelectInput\\styles.ts":"17","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryFinanceCard\\styles.ts":"18","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MainHeader\\styles.ts":"19","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Aside\\styles.ts":"20","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Content\\styles.ts":"21","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\emojis.ts":"22","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Toggle\\index.tsx":"23","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Toggle\\styles.ts":"24","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\index.tsx":"25","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\app.routes.tsx":"26","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\dashboard\\index.tsx":"27","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\dashboard\\styles.ts":"28","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\repositories\\expenses.ts":"29","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\repositories\\gains.ts":"30","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\formatCurrency.ts":"31","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\formatDate.ts":"32","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\months.ts":"33","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\WalletBox\\index.tsx":"34","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\WalletBox\\styles.ts":"35","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MessageBox\\index.tsx":"36","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MessageBox\\styles.ts":"37","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\PieChart\\index.tsx":"38","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\PieChart\\styles.ts":"39","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryBox\\index.tsx":"40","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryBox\\styles.ts":"41","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\BarChartBox\\index.tsx":"42","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\BarChartBox\\styles.ts":"43","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\hooks\\theme.tsx":"44","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\themes\\light.ts":"45","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\auth.routes.tsx":"46","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\signin\\index.tsx":"47","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\signin\\styles.ts":"48","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Input\\index.tsx":"49","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Input\\styles.ts":"50","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Button\\index.tsx":"51","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Button\\styles.ts":"52","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\hooks\\auth.tsx":"53"},{"size":469,"mtime":1620225848144,"results":"54","hashOfConfig":"55"},{"size":440,"mtime":1615033653301,"results":"56","hashOfConfig":"55"},{"size":557,"mtime":1619888932651,"results":"57","hashOfConfig":"55"},{"size":405,"mtime":1619550691000,"results":"58","hashOfConfig":"55"},{"size":332,"mtime":1619616932694,"results":"59","hashOfConfig":"55"},{"size":6333,"mtime":1619528706761,"results":"60","hashOfConfig":"55"},{"size":437,"mtime":1615033653293,"results":"61","hashOfConfig":"55"},{"size":1318,"mtime":1618845041230,"results":"62","hashOfConfig":"55"},{"size":396,"mtime":1615033653294,"results":"63","hashOfConfig":"55"},{"size":730,"mtime":1619639068334,"results":"64","hashOfConfig":"55"},{"size":1057,"mtime":1619528546353,"results":"65","hashOfConfig":"55"},{"size":624,"mtime":1615033972905,"results":"66","hashOfConfig":"55"},{"size":1096,"mtime":1619953582367,"results":"67","hashOfConfig":"55"},{"size":1122,"mtime":1620227479416,"results":"68","hashOfConfig":"55"},{"size":230,"mtime":1615033653288,"results":"69","hashOfConfig":"55"},{"size":660,"mtime":1619528516829,"results":"70","hashOfConfig":"55"},{"size":195,"mtime":1618080722120,"results":"71","hashOfConfig":"55"},{"size":939,"mtime":1617998815618,"results":"72","hashOfConfig":"55"},{"size":564,"mtime":1615033653295,"results":"73","hashOfConfig":"55"},{"size":1597,"mtime":1620227449696,"results":"74","hashOfConfig":"55"},{"size":597,"mtime":1615033653289,"results":"75","hashOfConfig":"55"},{"size":90,"mtime":1619616981524,"results":"76","hashOfConfig":"55"},{"size":815,"mtime":1619953353969,"results":"77","hashOfConfig":"55"},{"size":508,"mtime":1615033653296,"results":"78","hashOfConfig":"55"},{"size":451,"mtime":1620226926560,"results":"79","hashOfConfig":"55"},{"size":469,"mtime":1620227025294,"results":"80","hashOfConfig":"55"},{"size":12897,"mtime":1619796443775,"results":"81","hashOfConfig":"55"},{"size":210,"mtime":1619280178916,"results":"82","hashOfConfig":"55"},{"size":6152,"mtime":1619616832887,"results":"83","hashOfConfig":"55"},{"size":1318,"mtime":1619616883258,"results":"84","hashOfConfig":"55"},{"size":243,"mtime":1618079094481,"results":"85","hashOfConfig":"55"},{"size":426,"mtime":1618079941109,"results":"86","hashOfConfig":"55"},{"size":231,"mtime":1619617001863,"results":"87","hashOfConfig":"55"},{"size":1288,"mtime":1619528571306,"results":"88","hashOfConfig":"55"},{"size":757,"mtime":1619196501278,"results":"89","hashOfConfig":"55"},{"size":640,"mtime":1619528534634,"results":"90","hashOfConfig":"55"},{"size":525,"mtime":1619280356495,"results":"91","hashOfConfig":"55"},{"size":1471,"mtime":1619550690999,"results":"92","hashOfConfig":"55"},{"size":1572,"mtime":1619521991119,"results":"93","hashOfConfig":"55"},{"size":2433,"mtime":1619616302935,"results":"94","hashOfConfig":"55"},{"size":1335,"mtime":1619954828822,"results":"95","hashOfConfig":"55"},{"size":1968,"mtime":1619796820406,"results":"96","hashOfConfig":"55"},{"size":1658,"mtime":1619694816749,"results":"97","hashOfConfig":"55"},{"size":1644,"mtime":1619954537269,"results":"98","hashOfConfig":"55"},{"size":331,"mtime":1619616949787,"results":"99","hashOfConfig":"55"},{"size":265,"mtime":1620226759315,"results":"100","hashOfConfig":"55"},{"size":1357,"mtime":1620227785564,"results":"101","hashOfConfig":"55"},{"size":1099,"mtime":1620037278362,"results":"102","hashOfConfig":"55"},{"size":397,"mtime":1620036667126,"results":"103","hashOfConfig":"55"},{"size":176,"mtime":1620036705233,"results":"104","hashOfConfig":"55"},{"size":451,"mtime":1620037316363,"results":"105","hashOfConfig":"55"},{"size":389,"mtime":1620037313547,"results":"106","hashOfConfig":"55"},{"size":1248,"mtime":1620226347087,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10n5ifl",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\reportWebVitals.ts",[],["218","219"],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\app.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\globalStyles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\themes\\dark.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\list\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Layout\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\list\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Layout\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\ContentHeader\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\SelectInput\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryFinanceCard\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MainHeader\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Aside\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Content\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\ContentHeader\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\SelectInput\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryFinanceCard\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MainHeader\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Aside\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Content\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\emojis.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Toggle\\index.tsx",["220","221"],"import React, { useState } from 'react';\r\n\r\nimport {\r\n    Container,\r\n    ToggleLabel,\r\n    ToggleSelector\r\n} from './styles';\r\n\r\ninterface IToggleProps{\r\n    labelLeft: string;\r\n    labelRight: string;\r\n    checked: boolean;\r\n    onChange(): void;\r\n}\r\n\r\nconst Toggle: React.FC<IToggleProps> = ({\r\n    labelLeft,\r\n    labelRight,\r\n    checked,\r\n    onChange\r\n}) => {\r\n    const [online, setOnline] = useState(false);\r\n\r\n    return (\r\n\r\n        <Container>\r\n            <ToggleLabel>{labelLeft}</ToggleLabel>\r\n            <ToggleSelector\r\n                checked={checked}\r\n                uncheckedIcon={false}\r\n                checkedIcon={false}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <ToggleLabel>{labelRight}</ToggleLabel>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Toggle;","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Toggle\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\app.routes.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\dashboard\\index.tsx",["222"],"import React, { useState, useMemo } from 'react';\r\nimport { Container, Content } from './styles';\r\nimport ContentHeader from '../../components/ContentHeader';\r\nimport SelectInput from '../../components/SelectInput';\r\nimport WalletBox from '../../components/WalletBox';\r\nimport MessageBox from '../../components/MessageBox';\r\nimport PieChart from '../../components/PieChart';\r\nimport HistoryBox from '../../components/HistoryBox';\r\nimport BarChartBox from '../../components/BarChartBox';\r\n\r\nimport expenses from '../../repositories/expenses';\r\nimport gains from '../../repositories/gains';\r\nimport listOfMonths from '../../utils/months';\r\nimport happyImg from '../../assets/happy.svg';\r\nimport sadImg from '../../assets/sad.svg';\r\nimport grinningImg from '../../assets/grinning.svg';\r\n\r\n\r\nconst Dashboard: React.FC = () => {\r\n    //states\r\n    const [monthSelected, setMonthSelected] = useState<number>(new Date().getMonth() + 1);\r\n    const [yearSelected, setYearSelected] = useState<number>(2020);\r\n\r\n\r\n    //hooks\r\n    // const handleMonthSelected = (month: string) => {\r\n    //     try {\r\n    //         const parseMonth = Number(month);\r\n    //         setMonthSelected(parseMonth);\r\n    //     }\r\n    //     catch (e) {\r\n    //         throw new Error('invalid month value. Is accept 0 - 24.');\r\n    //     }\r\n    // }\r\n\r\n\r\n    // const handleYearSelected = (year: string) => {\r\n    //     try {\r\n    //         const parseYear = Number(year);\r\n    //         setMonthSelected(parseYear);\r\n    //     }\r\n    //     catch (e) {\r\n    //         throw new Error('invalid year value. Is accept integer numbers');\r\n    //     }\r\n    // }\r\n\r\n    const totalExpenses = useMemo(() => {\r\n        let total: number = 0;\r\n\r\n        expenses.forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth()\r\n\r\n            if (month === monthSelected && year === yearSelected) {\r\n                try {\r\n                    total += Number(item.amount);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid amount! Amount must be number');\r\n                }\r\n            }\r\n        })\r\n\r\n        return total;\r\n    }, [monthSelected, yearSelected])\r\n\r\n    const totalGains = useMemo(() => {\r\n        let total: number = 0;\r\n\r\n        gains.forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth()\r\n\r\n            if (month === monthSelected && year === yearSelected) {\r\n                try {\r\n                    total += Number(item.amount);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid amount! Amount must be number');\r\n                }\r\n            }\r\n        })\r\n\r\n        return total;\r\n\r\n    }, [monthSelected, yearSelected]);\r\n\r\n    const totalBalance = useMemo(() => {\r\n        return totalGains - totalExpenses;\r\n\r\n\r\n    }, [totalGains, totalExpenses]);//são as dependencias que serão escutadas, quando os dois mudare executa de novo\r\n\r\n    const relationExpensesVersusGains = useMemo(() => {\r\n        const total = totalGains + totalExpenses;\r\n\r\n        const percentGains = Number(((totalGains / total) * 100).toFixed(1));\r\n        const percentExpenses = Number(((totalExpenses / total) * 100).toFixed(1));\r\n\r\n        const data = [\r\n            {\r\n                name: \"Entradas\",\r\n                value: totalGains?totalGains:0,\r\n                percent: percentGains?percentGains:0,\r\n                color: \"#E44C4E\"\r\n\r\n            },\r\n            {\r\n                name: \"Saídas\",\r\n                value: totalExpenses?totalExpenses:0,\r\n                percent: percentExpenses?percentExpenses:0,\r\n                color: \"#F7931B\"\r\n\r\n            }\r\n        ]\r\n\r\n        return data;\r\n\r\n    }, [totalGains, totalExpenses])\r\n\r\n    const historyData = useMemo(() => {\r\n        let dataChart = (listOfMonths.map((_, month) => {\r\n\r\n            let amountEntry = 0;\r\n            gains.forEach(gain => {\r\n                const date = new Date(gain.date);\r\n                const gainMonth = date.getMonth();\r\n                const gainYear = date.getFullYear();\r\n\r\n                if (gainMonth === month && gainYear === yearSelected) {\r\n                    try {\r\n                        amountEntry += Number(gain.amount);\r\n                    }\r\n                    catch {\r\n                        throw new Error(\"AmountEntry is invalid. It must be valid number.\")\r\n                    }\r\n                }\r\n            });\r\n\r\n            let amountOutput = 0;\r\n            expenses.forEach(expense => {\r\n                const date = new Date(expense.date);\r\n                const expenseMonth = date.getMonth();\r\n                const expenseYear = date.getFullYear();\r\n\r\n                if (expenseMonth === month && expenseYear === yearSelected) {\r\n                    try {\r\n                        amountOutput += Number(expense.amount);\r\n                    }\r\n                    catch {\r\n                        throw new Error(\"AmountOutput is invalid. It must be valid number.\")\r\n                    }\r\n                }\r\n            });\r\n            const data = {\r\n                monthNumber: month,\r\n                month: listOfMonths[month].substr(0, 3),\r\n                amountEntry,\r\n                amountOutput\r\n            }\r\n\r\n            return data;\r\n        })\r\n            .filter(item => {\r\n                const currentMonth = new Date().getMonth();\r\n\r\n                return item.monthNumber <= currentMonth;\r\n            })\r\n        )\r\n\r\n        return dataChart;\r\n    }, [yearSelected])\r\n\r\n    const relationExpensevesRecurrentVersusEventual = useMemo(()=>{\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        expenses.filter(expense=>{\r\n            const date = new Date(expense.date);\r\n            const year = date.getFullYear();\r\n            const month= date.getMonth()+1;\r\n\r\n            return month === monthSelected && year === yearSelected;\r\n        })\r\n        .forEach(expense=>{\r\n            if(expense.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(expense.amount);\r\n            }\r\n            if(expense.frequency === 'eventual'){\r\n                return amountEventual += Number(expense.amount);\r\n            }\r\n        });\r\n\r\n        const total = amountRecurrent + amountEventual;\r\n        const recurrentPercent = Number(((amountRecurrent/total) * 100).toFixed(1));\r\n        const eventualPercent = Number(((amountEventual/total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: 'Recorrentes',\r\n                amount: amountRecurrent,\r\n                percent: recurrentPercent? recurrentPercent:0,\r\n                color: \"#F7931B\"\r\n            },\r\n            {\r\n                name: 'Eventual',\r\n                amount: amountEventual,\r\n                percent: eventualPercent?eventualPercent:0,\r\n                color: \"#E44C4E\"\r\n            },\r\n        ];\r\n    },[monthSelected, yearSelected])\r\n\r\n    const relationGainsRecurrentVersusEventual = useMemo(()=>{\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        gains.filter(gain=>{\r\n            const date = new Date(gain.date);\r\n            const year = date.getFullYear();\r\n            const month= date.getMonth()+1;\r\n\r\n            return month === monthSelected && year === yearSelected;\r\n        })\r\n        .forEach(gain=>{\r\n            if(gain.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(gain.amount);\r\n            }\r\n            if(gain.frequency === 'eventual'){\r\n                return amountEventual += Number(gain.amount);\r\n            }\r\n        });\r\n\r\n        \r\n        const total = amountRecurrent + amountEventual;\r\n\r\n        const recurrentPercent = Number(((amountRecurrent/total) * 100).toFixed(1));\r\n        const eventualPercent = Number(((amountEventual/total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: 'Recorrentes',\r\n                amount: amountRecurrent,\r\n                percent: recurrentPercent ? eventualPercent: 0, \r\n                color: \"#F7931B\"\r\n            },\r\n            {\r\n                name: 'Eventual',\r\n                amount: amountEventual,\r\n                percent: eventualPercent ? eventualPercent:0,\r\n                color: \"#E44C4E\"\r\n            },\r\n        ];\r\n    },[monthSelected, yearSelected])\r\n\r\n    const message = useMemo(() => {\r\n        if (totalBalance > 0) {\r\n            return {\r\n                title: \"Muito Bem\",\r\n                description: \"Sua carteira está positiva!\",\r\n                footerTest: \"Continue assim. Considere investir no seu saldo\",\r\n                icon: happyImg\r\n            }\r\n        }\r\n        else if(totalBalance === 0 && totalExpenses === 0){\r\n            return {\r\n                title: \"Ops!\",\r\n                description: \"Neste mês, não há registro de entradas ou saídas\",\r\n                footerTest: \"Parece que você não fez nenhum registro no mês/ano selecionado\",\r\n                icon: grinningImg\r\n            }\r\n        }\r\n        else if (totalBalance === 0) {\r\n            return {\r\n                title: \"Ufa!!\",\r\n                description: \"Neste mês você gastou exatamente o que guanhou\",\r\n                footerTest: \"Tenha cuidado. No próximo mês tente poupar o seu dinheiro\",\r\n                icon: grinningImg\r\n            }\r\n        }\r\n\r\n        else {\r\n            return {\r\n                title: \"Que triste! \",\r\n                description: \"Neste mês, você gastou mais do que deveria!\",\r\n                footerTest: \"Tente gastar os gastos desnecessários\",\r\n                icon: sadImg\r\n            }\r\n        }\r\n    }, [totalBalance, totalGains, totalExpenses])\r\n\r\n    const months = useMemo(() => {\r\n        return listOfMonths.map((month, index) => {\r\n            return {\r\n                value: index + 1,\r\n                label: month\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const years = useMemo(() => {\r\n        const uniqYears: Set<number> = new Set<number>();\r\n\r\n        [...expenses, ...gains].forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n            uniqYears.add(year);\r\n        })\r\n\r\n        return Array.from(uniqYears).map(year => {\r\n            return {\r\n                value: year,\r\n                label: year,\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <ContentHeader title=\"Dashboard\" lineColor=\"#FFF\">\r\n                <SelectInput\r\n                    options={months}\r\n                    onChange={e => setMonthSelected(parseInt(e.target.value))}\r\n                    defaultValue={monthSelected}\r\n                />\r\n                <SelectInput\r\n                    options={years}\r\n                    onChange={e => setYearSelected(parseInt(e.target.value))}\r\n                    defaultValue={yearSelected}\r\n                />\r\n            </ContentHeader>\r\n            <Content>\r\n                <WalletBox\r\n                    title=\"saldo\"\r\n                    amount={totalBalance}\r\n                    footerLabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"dollar\"\r\n                    color=\"#4E41F0\"\r\n                />\r\n                <WalletBox\r\n                    title=\"entradas\"\r\n                    amount={totalGains}\r\n                    footerLabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"arrowUp\"\r\n                    color=\"#F7931B\"\r\n                />\r\n                <WalletBox\r\n                    title=\"saídas\"\r\n                    amount={totalExpenses}\r\n                    footerLabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"arrowDown\"\r\n                    color=\"#E44C4E\"\r\n                />\r\n                <MessageBox\r\n                    title={message.title}\r\n                    description={message.description}\r\n                    footerTest={message.footerTest}\r\n                    icon={message.icon}\r\n                />\r\n\r\n                <PieChart data={relationExpensesVersusGains} />\r\n\r\n                <HistoryBox\r\n                    data={historyData}\r\n                    LineColorAmountEntry=\"#F7931B\"\r\n                    LineColorAmountOutput=\"#E44C4E\"\r\n                />\r\n\r\n                <BarChartBox\r\n                    title=\"Saídas\"\r\n                    data={relationExpensevesRecurrentVersusEventual}\r\n                /> \r\n\r\n                <BarChartBox\r\n                    title=\"Entradas\"\r\n                    data={relationGainsRecurrentVersusEventual}\r\n                /> \r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\dashboard\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\repositories\\expenses.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\repositories\\gains.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\formatCurrency.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\formatDate.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\utils\\months.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\WalletBox\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\WalletBox\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MessageBox\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\MessageBox\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\PieChart\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\PieChart\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryBox\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\HistoryBox\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\BarChartBox\\index.tsx",["223"],"import React from 'react';\r\nimport {\r\n    ResponsiveContainer,\r\n    BarChart,\r\n    Bar,\r\n    Cell,\r\n    Tooltip\r\n} from 'recharts';\r\nimport { NumericLiteral } from 'typescript';\r\nimport formatCurrency from '../../utils/formatCurrency';\r\nimport {\r\n    Container,\r\n    SideLeft,\r\n    SideRight,\r\n    LegendContainer,\r\n    Legend\r\n} from './styles';\r\n\r\ninterface IBarChartBox {\r\n    title: string;\r\n    data: {\r\n        name: string;\r\n        amount: number;\r\n        percent: number;\r\n        color: string;\r\n    }[]\r\n}\r\n\r\nconst BarChartBox: React.FC<IBarChartBox> = ({ title, data }) => {\r\n    return (\r\n        <Container>\r\n            <SideLeft>\r\n                <h2>{title}</h2>\r\n\r\n                <LegendContainer>\r\n                    {\r\n                        data.map(indicator => (\r\n                            <Legend key={indicator.name} color={indicator.color}>\r\n                                <div>{indicator.percent}%</div>\r\n                                <span>{indicator.name}</span>\r\n                            </Legend>\r\n                        ))\r\n                    }\r\n                </LegendContainer>\r\n            </SideLeft>\r\n            <SideRight>\r\n                <ResponsiveContainer>\r\n                    <BarChart data={data}>\r\n                        <Bar dataKey=\"amount\" name=\"valor\">\r\n                            {data.map(indicator => (\r\n                                <Cell\r\n                                    key={indicator.name}\r\n                                    fill={indicator.color}\r\n\r\n                                />\r\n                            ))}\r\n                        </Bar>\r\n                        <Tooltip \r\n                            cursor={{fill: \"none\"}} \r\n                            formatter={(value: string)=> formatCurrency(value)}/>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            </SideRight>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default BarChartBox;","C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\BarChartBox\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\hooks\\theme.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\styles\\themes\\light.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\routes\\auth.routes.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\signin\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\pages\\signin\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Input\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Input\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Button\\index.tsx",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\components\\Button\\styles.ts",[],"C:\\Users\\OSASSP01\\Projects\\dashboard-react\\src\\hooks\\auth.tsx",[],{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":22,"column":12,"nodeType":"230","messageId":"231","endLine":22,"endColumn":18},{"ruleId":"228","severity":1,"message":"232","line":22,"column":20,"nodeType":"230","messageId":"231","endLine":22,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":292,"column":8,"nodeType":"235","endLine":292,"endColumn":49,"suggestions":"236"},{"ruleId":"228","severity":1,"message":"237","line":9,"column":10,"nodeType":"230","messageId":"231","endLine":9,"endColumn":24},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"@typescript-eslint/no-unused-vars","'online' is assigned a value but never used.","Identifier","unusedVar","'setOnline' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'totalGains'. Either exclude it or remove the dependency array.","ArrayExpression",["240"],"'NumericLiteral' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},"Update the dependencies array to be: [totalBalance, totalExpenses]",{"range":"243","text":"244"},[9828,9869],"[totalBalance, totalExpenses]"]